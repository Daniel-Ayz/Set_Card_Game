BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

YES
we used the config fields everywhere needed, and there is a use for everyone of them.
we avoided the use of magic numbers because we used the config fields.
we used it in the updatetime functions, board functions and ext.
we tested by changing the value in the config file and saw the difference.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

YES
we terminated the threads by calling the terminate function on all the players from the main thread.
each one of the players called the terminate function on the AI thread (if he had one). and joined on it so it waited until it closed.
the main thread joined all the player threads and waited for them to finish.
only after all the player and AI threads closed we terminated the main thread.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.
sorry we didn't have enough time :(

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

YES
we created only one thread per player.
the player threads go to sleep until a keypressed (we used a blocking queue)
the player sleeps on the keypressed queue.
the dealer thread goes to sleep for some time and wakes up if a player found a set or if he needs to update the clock.
the dealer waits on itself.
we tested it by changing the time duration that the dealer sleeps and saw that the clock updates changed and also,
we tried to measure time between the different function calls. when a player pressed a button we saw an immediate response,
from the dealer, so he checked the set even if he wanted to sleep for a long time.
the player thread was not active during the wait for a key press, we checked the cpu usage during this wait and saw a decrease in it.



